import web3 from './web3.js'
import getFutureAddress from './getFutureAddress.js';
import resource from './resource.js';

Meteor.methods({
  'create' : (recipient, url) => {
    console.log('create', recipient, url);

    // TODO: Authorize the client user!

    web3.personal.unlockAccount(web3.eth.accounts[0], 'iloveethereum');

    // calculate the future address for this newly created smart contract so
    // we can send it back to the client without having to wait for it to be mined
    // TODO: Error handling if the contract is never created...
    var futureAddress = getFutureAddress(web3.eth.accounts[0]);
    console.log('future address: ', futureAddress);

    var resource_resource = resource.contract.new(
       recipient,
       url,
       {
         from: web3.eth.accounts[0],
         data: '0x6060604052341561000c57fe5b60405161042b38038061042b833981016040528080519060200190919080518201919050505b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600190805190602001906100ca9291906100d3565b505b5050610178565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011457805160ff1916838001178555610142565b82800160010185558215610142579182015b82811115610141578251825591602001919060010190610126565b5b50905061014f9190610153565b5090565b61017591905b80821115610171576000816000905550600101610159565b5090565b90565b6102a4806101876000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635600f04f1461005157806366d003ac146100ea5780638da5cb5b1461013c575bfe5b341561005957fe5b61006161018e565b60405180806020018281038252838181518152602001915080519060200190808383600083146100b0575b8051825260208311156100b05760208201915060208101905060208303925061008c565b505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156100f257fe5b6100fa61022c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561014457fe5b61014c610252565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102245780601f106101f957610100808354040283529160200191610224565b820191906000526020600020905b81548152906001019060200180831161020757829003601f168201915b505050505081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058200ce261df78f88f6d8645b3390498c3f2ec87cd136a365a14aa25c7c68bc4bfe00029',
         gas: '4700000'
       }, function (e, contract){
        if (typeof contract.address !== 'undefined') {
             console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
        }
     });
    return futureAddress;
  },
  'attach' : (address) => {
    console.log('attach', address);
    var instance = resource.contract.at(address);
    return instance.url();
  }
})
